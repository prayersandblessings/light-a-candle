input createLanguageInput {
  data: LanguageInput
}

type createLanguagePayload {
  language: Language
}

input createPrayersAndBlessingInput {
  data: PrayersAndBlessingInput
}

type createPrayersAndBlessingPayload {
  prayersAndBlessing: PrayersAndBlessings
}

input createResourceCategoryInput {
  data: ResourceCategoryInput
}

type createResourceCategoryPayload {
  resourceCategory: ResourceCategory
}

input createResourceInput {
  data: ResourceInput
}

type createResourcePayload {
  resource: Resource
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSoundInput {
  data: SoundInput
}

type createSoundPayload {
  sound: Sound
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteLanguageInput {
  where: InputID
}

type deleteLanguagePayload {
  language: Language
}

input deletePrayersAndBlessingInput {
  where: InputID
}

type deletePrayersAndBlessingPayload {
  prayersAndBlessing: PrayersAndBlessings
}

input deleteResourceCategoryInput {
  where: InputID
}

type deleteResourceCategoryPayload {
  resourceCategory: ResourceCategory
}

input deleteResourceInput {
  where: InputID
}

type deleteResourcePayload {
  resource: Resource
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSoundInput {
  where: InputID
}

type deleteSoundPayload {
  sound: Sound
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editLanguageInput {
  name: String
  enabled: Boolean
}

input editPrayersAndBlessingInput {
  Sender: String
  receiver_email: String
  message: String
  enabled: Boolean
  language: ID
  sound: ID
}

input editResourceCategoryInput {
  title: String
  enabled: Boolean
}

input editResourceInput {
  title: String
  content: String
  author: String
  resource_category: ID
  enabled: Boolean
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSoundInput {
  name: String
  sound: ID
  enabled: Boolean
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Language {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  enabled: Boolean
}

type LanguageAggregator {
  count: Int
  totalCount: Int
}

type LanguageConnection {
  values: [Language]
  groupBy: LanguageGroupBy
  aggregate: LanguageAggregator
}

type LanguageConnectionCreated_at {
  key: DateTime
  connection: LanguageConnection
}

type LanguageConnectionEnabled {
  key: Boolean
  connection: LanguageConnection
}

type LanguageConnectionId {
  key: ID
  connection: LanguageConnection
}

type LanguageConnectionName {
  key: String
  connection: LanguageConnection
}

type LanguageConnectionUpdated_at {
  key: DateTime
  connection: LanguageConnection
}

type LanguageGroupBy {
  id: [LanguageConnectionId]
  created_at: [LanguageConnectionCreated_at]
  updated_at: [LanguageConnectionUpdated_at]
  name: [LanguageConnectionName]
  enabled: [LanguageConnectionEnabled]
}

input LanguageInput {
  name: String
  enabled: Boolean
}

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Language | LanguageConnection | LanguageAggregator | LanguageGroupBy | LanguageConnectionId | LanguageConnectionCreated_at | LanguageConnectionUpdated_at | LanguageConnectionName | LanguageConnectionEnabled | createLanguagePayload | updateLanguagePayload | deleteLanguagePayload | PrayersAndBlessings | PrayersAndBlessingsConnection | PrayersAndBlessingsAggregator | PrayersAndBlessingsGroupBy | PrayersAndBlessingsConnectionId | PrayersAndBlessingsConnectionCreated_at | PrayersAndBlessingsConnectionUpdated_at | PrayersAndBlessingsConnectionSender | PrayersAndBlessingsConnectionReceiver_email | PrayersAndBlessingsConnectionMessage | PrayersAndBlessingsConnectionEnabled | PrayersAndBlessingsConnectionLanguage | PrayersAndBlessingsConnectionSound | createPrayersAndBlessingPayload | updatePrayersAndBlessingPayload | deletePrayersAndBlessingPayload | ResourceCategory | ResourceCategoryConnection | ResourceCategoryAggregator | ResourceCategoryGroupBy | ResourceCategoryConnectionId | ResourceCategoryConnectionCreated_at | ResourceCategoryConnectionUpdated_at | ResourceCategoryConnectionTitle | ResourceCategoryConnectionEnabled | createResourceCategoryPayload | updateResourceCategoryPayload | deleteResourceCategoryPayload | Resource | ResourceConnection | ResourceAggregator | ResourceGroupBy | ResourceConnectionId | ResourceConnectionCreated_at | ResourceConnectionUpdated_at | ResourceConnectionTitle | ResourceConnectionContent | ResourceConnectionAuthor | ResourceConnectionResource_category | ResourceConnectionEnabled | createResourcePayload | updateResourcePayload | deleteResourcePayload | Sound | SoundConnection | SoundAggregator | SoundGroupBy | SoundConnectionId | SoundConnectionCreated_at | SoundConnectionUpdated_at | SoundConnectionName | SoundConnectionSound | SoundConnectionEnabled | createSoundPayload | updateSoundPayload | deleteSoundPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createLanguage(input: createLanguageInput): createLanguagePayload
  updateLanguage(input: updateLanguageInput): updateLanguagePayload
  deleteLanguage(input: deleteLanguageInput): deleteLanguagePayload
  createPrayersAndBlessing(input: createPrayersAndBlessingInput): createPrayersAndBlessingPayload
  updatePrayersAndBlessing(input: updatePrayersAndBlessingInput): updatePrayersAndBlessingPayload
  deletePrayersAndBlessing(input: deletePrayersAndBlessingInput): deletePrayersAndBlessingPayload
  createResourceCategory(input: createResourceCategoryInput): createResourceCategoryPayload
  updateResourceCategory(input: updateResourceCategoryInput): updateResourceCategoryPayload
  deleteResourceCategory(input: deleteResourceCategoryInput): deleteResourceCategoryPayload
  createResource(input: createResourceInput): createResourcePayload
  updateResource(input: updateResourceInput): updateResourcePayload
  deleteResource(input: deleteResourceInput): deleteResourcePayload
  createSound(input: createSoundInput): createSoundPayload
  updateSound(input: updateSoundInput): updateSoundPayload
  deleteSound(input: deleteSoundInput): deleteSoundPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

input PrayersAndBlessingInput {
  Sender: String
  receiver_email: String
  message: String
  enabled: Boolean
  language: ID
  sound: ID
}

type PrayersAndBlessings {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Sender: String
  receiver_email: String
  message: String
  enabled: Boolean
  language: Language
  sound: Sound
}

type PrayersAndBlessingsAggregator {
  count: Int
  totalCount: Int
}

type PrayersAndBlessingsConnection {
  values: [PrayersAndBlessings]
  groupBy: PrayersAndBlessingsGroupBy
  aggregate: PrayersAndBlessingsAggregator
}

type PrayersAndBlessingsConnectionCreated_at {
  key: DateTime
  connection: PrayersAndBlessingsConnection
}

type PrayersAndBlessingsConnectionEnabled {
  key: Boolean
  connection: PrayersAndBlessingsConnection
}

type PrayersAndBlessingsConnectionId {
  key: ID
  connection: PrayersAndBlessingsConnection
}

type PrayersAndBlessingsConnectionLanguage {
  key: ID
  connection: PrayersAndBlessingsConnection
}

type PrayersAndBlessingsConnectionMessage {
  key: String
  connection: PrayersAndBlessingsConnection
}

type PrayersAndBlessingsConnectionReceiver_email {
  key: String
  connection: PrayersAndBlessingsConnection
}

type PrayersAndBlessingsConnectionSender {
  key: String
  connection: PrayersAndBlessingsConnection
}

type PrayersAndBlessingsConnectionSound {
  key: ID
  connection: PrayersAndBlessingsConnection
}

type PrayersAndBlessingsConnectionUpdated_at {
  key: DateTime
  connection: PrayersAndBlessingsConnection
}

type PrayersAndBlessingsGroupBy {
  id: [PrayersAndBlessingsConnectionId]
  created_at: [PrayersAndBlessingsConnectionCreated_at]
  updated_at: [PrayersAndBlessingsConnectionUpdated_at]
  Sender: [PrayersAndBlessingsConnectionSender]
  receiver_email: [PrayersAndBlessingsConnectionReceiver_email]
  message: [PrayersAndBlessingsConnectionMessage]
  enabled: [PrayersAndBlessingsConnectionEnabled]
  language: [PrayersAndBlessingsConnectionLanguage]
  sound: [PrayersAndBlessingsConnectionSound]
}

type Query {
  language(id: ID!): Language
  languages(sort: String, limit: Int, start: Int, where: JSON): [Language]
  languagesConnection(sort: String, limit: Int, start: Int, where: JSON): LanguageConnection
  prayersAndBlessing(id: ID!): PrayersAndBlessings
  prayersAndBlessings(sort: String, limit: Int, start: Int, where: JSON): [PrayersAndBlessings]
  prayersAndBlessingsConnection(sort: String, limit: Int, start: Int, where: JSON): PrayersAndBlessingsConnection
  resourceCategory(id: ID!): ResourceCategory
  resourceCategories(sort: String, limit: Int, start: Int, where: JSON): [ResourceCategory]
  resourceCategoriesConnection(sort: String, limit: Int, start: Int, where: JSON): ResourceCategoryConnection
  resource(id: ID!): Resource
  resources(sort: String, limit: Int, start: Int, where: JSON): [Resource]
  resourcesConnection(sort: String, limit: Int, start: Int, where: JSON): ResourceConnection
  sound(id: ID!): Sound
  sounds(sort: String, limit: Int, start: Int, where: JSON): [Sound]
  soundsConnection(sort: String, limit: Int, start: Int, where: JSON): SoundConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Resource {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  content: String
  author: String
  resource_category: ResourceCategory
  enabled: Boolean
}

type ResourceAggregator {
  count: Int
  totalCount: Int
}

type ResourceCategory {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  enabled: Boolean
}

type ResourceCategoryAggregator {
  count: Int
  totalCount: Int
}

type ResourceCategoryConnection {
  values: [ResourceCategory]
  groupBy: ResourceCategoryGroupBy
  aggregate: ResourceCategoryAggregator
}

type ResourceCategoryConnectionCreated_at {
  key: DateTime
  connection: ResourceCategoryConnection
}

type ResourceCategoryConnectionEnabled {
  key: Boolean
  connection: ResourceCategoryConnection
}

type ResourceCategoryConnectionId {
  key: ID
  connection: ResourceCategoryConnection
}

type ResourceCategoryConnectionTitle {
  key: String
  connection: ResourceCategoryConnection
}

type ResourceCategoryConnectionUpdated_at {
  key: DateTime
  connection: ResourceCategoryConnection
}

type ResourceCategoryGroupBy {
  id: [ResourceCategoryConnectionId]
  created_at: [ResourceCategoryConnectionCreated_at]
  updated_at: [ResourceCategoryConnectionUpdated_at]
  title: [ResourceCategoryConnectionTitle]
  enabled: [ResourceCategoryConnectionEnabled]
}

input ResourceCategoryInput {
  title: String
  enabled: Boolean
}

type ResourceConnection {
  values: [Resource]
  groupBy: ResourceGroupBy
  aggregate: ResourceAggregator
}

type ResourceConnectionAuthor {
  key: String
  connection: ResourceConnection
}

type ResourceConnectionContent {
  key: String
  connection: ResourceConnection
}

type ResourceConnectionCreated_at {
  key: DateTime
  connection: ResourceConnection
}

type ResourceConnectionEnabled {
  key: Boolean
  connection: ResourceConnection
}

type ResourceConnectionId {
  key: ID
  connection: ResourceConnection
}

type ResourceConnectionResource_category {
  key: ID
  connection: ResourceConnection
}

type ResourceConnectionTitle {
  key: String
  connection: ResourceConnection
}

type ResourceConnectionUpdated_at {
  key: DateTime
  connection: ResourceConnection
}

type ResourceGroupBy {
  id: [ResourceConnectionId]
  created_at: [ResourceConnectionCreated_at]
  updated_at: [ResourceConnectionUpdated_at]
  title: [ResourceConnectionTitle]
  content: [ResourceConnectionContent]
  author: [ResourceConnectionAuthor]
  resource_category: [ResourceConnectionResource_category]
  enabled: [ResourceConnectionEnabled]
}

input ResourceInput {
  title: String
  content: String
  author: String
  resource_category: ID
  enabled: Boolean
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Sound {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  sound: UploadFile
  enabled: Boolean
}

type SoundAggregator {
  count: Int
  totalCount: Int
}

type SoundConnection {
  values: [Sound]
  groupBy: SoundGroupBy
  aggregate: SoundAggregator
}

type SoundConnectionCreated_at {
  key: DateTime
  connection: SoundConnection
}

type SoundConnectionEnabled {
  key: Boolean
  connection: SoundConnection
}

type SoundConnectionId {
  key: ID
  connection: SoundConnection
}

type SoundConnectionName {
  key: String
  connection: SoundConnection
}

type SoundConnectionSound {
  key: ID
  connection: SoundConnection
}

type SoundConnectionUpdated_at {
  key: DateTime
  connection: SoundConnection
}

type SoundGroupBy {
  id: [SoundConnectionId]
  created_at: [SoundConnectionCreated_at]
  updated_at: [SoundConnectionUpdated_at]
  name: [SoundConnectionName]
  sound: [SoundConnectionSound]
  enabled: [SoundConnectionEnabled]
}

input SoundInput {
  name: String
  sound: ID
  enabled: Boolean
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateLanguageInput {
  where: InputID
  data: editLanguageInput
}

type updateLanguagePayload {
  language: Language
}

input updatePrayersAndBlessingInput {
  where: InputID
  data: editPrayersAndBlessingInput
}

type updatePrayersAndBlessingPayload {
  prayersAndBlessing: PrayersAndBlessings
}

input updateResourceCategoryInput {
  where: InputID
  data: editResourceCategoryInput
}

type updateResourceCategoryPayload {
  resourceCategory: ResourceCategory
}

input updateResourceInput {
  where: InputID
  data: editResourceInput
}

type updateResourcePayload {
  resource: Resource
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSoundInput {
  where: InputID
  data: editSoundInput
}

type updateSoundPayload {
  sound: Sound
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
